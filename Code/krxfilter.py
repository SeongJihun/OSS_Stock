import csv

"""
####################################
###### STAGE 1 상장주식수 구하기 ######
####################################
numberofstock17 = open("전종목 시세_20171110.csv", "r", newline='')
numberofstock18 = open("전종목 시세_20181112.csv", "r", newline='')
numberofstock19 = open("전종목 시세_20191111.csv", "r", newline='')
numberofstock20 = open("전종목 시세_20201111.csv", "r", newline='')
numberofstock21 = open("전종목 시세_20211111.csv", "r", newline='')

numberofstock17line=numberofstock17.readline()
numberofstock18line=numberofstock18.readline()
numberofstock19line=numberofstock19.readline()
numberofstock20line=numberofstock20.readline()
numberofstock21line=numberofstock21.readline()

#전종목 시세 : 종목코드,종목명,시장구분,소속부,종가,대비,등락률,시가,고가,저가,거래량,거래대금,시가총액,상장주식수
numberofstock17list=list()
nameofstack17list=list()
while(numberofstock17line != ''):
    line=numberofstock17line.split(',')
    nameofstack17list.append(line[0]) #17년 종목코드
    numberofstock17list.append(line[13]) #17년 상장주식수
    numberofstock17line=numberofstock17.readline()

numberofstock18list=list()
nameofstack18list=list()
while(numberofstock18line != ''):
    line=numberofstock18line.split(',')
    nameofstack18list.append(line[0]) #18년 종목코드
    numberofstock18list.append(line[13]) #18년 상장주식수
    numberofstock18line=numberofstock18.readline()


numberofstock19list=list()
nameofstack19list=list()
while(numberofstock19line != ''):
    line=numberofstock19line.split(',')
    nameofstack19list.append(line[0]) #19년 종목코드
    numberofstock19list.append(line[13]) #19년 상장주식수
    numberofstock19line=numberofstock19.readline()

numberofstock20list=list()
nameofstack20list=list()
while(numberofstock20line != ''):
    line=numberofstock20line.split(',')
    nameofstack20list.append(line[0]) #20년 종목코드
    numberofstock20list.append(line[13]) #20년 상장주식수
    numberofstock20line=numberofstock20.readline()

numberofstock21list=list()
nameofstack21list=list()
while(numberofstock21line != ''):
    line=numberofstock21line.split(',')
    nameofstack21list.append(line[0]) #21년 종목코드
    numberofstock21list.append(line[13]) #21년 상장주식수
    numberofstock21line=numberofstock21.readline()
numberofstock17.close()
numberofstock18.close()
numberofstock19.close()
numberofstock20.close()
numberofstock21.close()
####################################
#### STAGE 1 상장주식수 구하기 끝 #####
####################################



###################################
## STAGE 2 EPS를 저장한 파일 만들기 ##
###################################

# 종목코드,종목명,종가,대비,등락률,EPS,PER,BPS,PBR,주당배당금,배당수익률
PEREPS2021 = open("PERPBR배당수익률(개별종목)_20211125.csv", "r", newline='')
PEREPS2020 = open("PERPBR배당수익률(개별종목)_20201111.csv", "r", newline='')
PEREPS2019 = open("PERPBR배당수익률(개별종목)_20191111.csv", "r", newline='')
PEREPS2018 = open("PERPBR배당수익률(개별종목)_20181111.csv", "r", newline='')
PEREPS2017 = open("PERPBR배당수익률(개별종목)_20171111.csv", "r", newline='')

#종목코드
shcode2021=list()
shcode2020=list()
shcode2019=list()
shcode2018=list()
shcode2017=list()

#EPS 저장
EPS2021=list()
EPS2020=list()
EPS2019=list()
EPS2018=list()
EPS2017=list()

PEREPS2021line=PEREPS2021.readline()
PEREPS2020line=PEREPS2020.readline()
PEREPS2019line=PEREPS2019.readline()
PEREPS2018line=PEREPS2018.readline()
PEREPS2017line=PEREPS2017.readline()

#2021 EPS
while(PEREPS2021line!=''):
    line = PEREPS2021line.split(',')
    shcode2021.append(line[0])
    EPS2021.append(line[5])
    PEREPS2021line=PEREPS2021.readline()

#2020 EPS
while(PEREPS2020line!=''):
    line = PEREPS2020line.split(',')
    shcode2020.append(line[0])
    EPS2020.append(line[5])
    PEREPS2020line=PEREPS2020.readline()

#2019 EPS
while(PEREPS2019line!=''):
    line = PEREPS2019line.split(',')
    shcode2019.append(line[0])
    EPS2019.append(line[5])
    PEREPS2019line=PEREPS2019.readline()

#2018 EPS
while(PEREPS2018line!=''):
    line = PEREPS2018line.split(',')
    shcode2018.append(line[0])
    EPS2018.append(line[5])
    PEREPS2018line=PEREPS2018.readline()

#2017 EPS
while(PEREPS2017line!=''):
    line = PEREPS2017line.split(',')
    shcode2017.append(line[0])
    EPS2017.append(line[5])
    PEREPS2017line=PEREPS2017.readline()

PEREPS2021.close()
PEREPS2020.close()
PEREPS2019.close()
PEREPS2018.close()
PEREPS2017.close()

#for i in range(10):
#    print(shcode2021[i], EPS2017[i], EPS2018[i], EPS2019[i], EPS2020[i], EPS2021[i])


EPSfile = open("EPS5년치.csv", "a", newline='')
appendline=csv.writer(EPSfile)
for i in range(len(shcode2021)):
    eps2021=EPS2021[i]
    eps2020 = 0
    eps2019 = 0
    eps2018 = 0
    eps2017 = 0
    num2021 = 0
    num2020 = 0
    num2019 = 0
    num2018 = 0
    num2017 = 0

    if(shcode2021[i] in shcode2020):
        eps2020 = EPS2020[shcode2020.index(shcode2021[i])]
    if (shcode2021[i] in shcode2019):
        eps2019 = EPS2019[shcode2019.index(shcode2021[i])]
    if (shcode2021[i] in shcode2018):
        eps2018 = EPS2018[shcode2018.index(shcode2021[i])]
    if (shcode2021[i] in shcode2017):
        eps2017 = EPS2017[shcode2017.index(shcode2021[i])]
    if (shcode2021[i] in nameofstack17list):
        num2017 = numberofstock17list[nameofstack17list.index(shcode2021[i])].strip()
    if (shcode2021[i] in nameofstack18list):
        num2018 = numberofstock18list[nameofstack18list.index(shcode2021[i])].strip()
    if (shcode2021[i] in nameofstack19list):
        num2019 = numberofstock19list[nameofstack19list.index(shcode2021[i])].strip()
    if (shcode2021[i] in nameofstack20list):
        num2020 = numberofstock20list[nameofstack20list.index(shcode2021[i])].strip()
    if (shcode2021[i] in nameofstack21list):
        num2021 = numberofstock21list[nameofstack21list.index(shcode2021[i])].strip()
    resultlist=[shcode2021[i], eps2017, eps2018, eps2019, eps2020, eps2021, num2017, num2018, num2019, num2020, num2021]
    appendline.writerow(resultlist)

EPSfile.close()

###################################
## STAGE 3 데이터가 온전한 파일 건지기 #
## EPS5년치.csv에서 income증가율 20~50 종목.csv을 만들기 #
###################################
"""
"""
filterfile = open("income증가율 20~50 종목.csv", "a", newline='')
appendline=csv.writer(filterfile)

fixfile = open("EPS5년치.csv", "r", newline='')
fixline=fixfile.readline()
line=fixline.split(',')
print(line)
appendline.writerow(['종목코드', '평균순이익증가율', '평균EPS증가율'])
fixline = fixfile.readline()
number=0
epslist=[]
while(fixline!=''):
    filter=0 #0이면 저장, 1이면 저장안함
    line=fixline.split(',')
    incomenum=0
    incomerate1718=0
    incomerate1819=0
    incomerate1920=0
    incomerate2021=0
    if(line[5]==''):
        filter=1

    if(line[18]!='#DIV/0!'):
        incomenum=incomenum+1
        incomerate1718 = float(line[18])

    if (line[19] != '#DIV/0!'):
        incomenum = incomenum + 1
        incomerate1819 = float(line[19])

    if (line[20] != '#DIV/0!'):
        incomenum = incomenum + 1
        incomerate1920 = float(line[20])

    if (line[21] != '#DIV/0!'):
        incomenum = incomenum + 1
        incomerate2021 = float(line[21])

    epsnum=0
    epsrate1718=0
    epsrate1819=0
    epsrate1920=0
    epsrate2021=0
    if (line[23] == '#DIV/0!'):
        filter = 1
    if (line[23] != '#DIV/0!'):
        epsnum = epsnum + 1
        epsrate1718 = float(line[23])

    if (line[24] != '#DIV/0!'):
        epsnum = epsnum + 1
        epsrate1819 = float(line[24])

    if (line[25] != '#DIV/0!'):
        epsnum = epsnum + 1
        epsrate1920 = float(line[25])

    if (line[26] != '#DIV/0!\r\n'):
        epsnum = epsnum + 1
        epsrate2021 = float(line[26])

    incomrateavg=0
    epsrateavg=0

    if(incomenum==0):
        filter=1
    else:
        incomrateavg=(incomerate1718+incomerate1819+incomerate1920+incomerate2021)/incomenum

    if (epsnum == 0):
        filter = 1
    else:
        epsrateavg = (epsrate1718 + epsrate1819 + epsrate1920 + epsrate2021) / epsnum

    if(filter==1):
        fixline = fixfile.readline()
    elif(0.2<=incomrateavg and incomrateavg<=0.5):
        number=number+1
        appendline.writerow([line[0], incomrateavg, epsrateavg])
        epslist.append(epsrateavg)
    fixline = fixfile.readline()
print(number)
fixfile.close()



###################################
## STAGE 3 데이터가 온전한 파일 건지기 #
## EPS5년치.csv에서 income증가율 20~50 종목.csv을 만들기 #
########### 끝 ####################
###################################


###################################
## STAGE 4 데이터가 온전한 파일 건지기 #
## income증가율 20~50 종목.csv를 토대로 #
## PERPBR배당수익률(개별종목)_202111nn.csv#
## 에서 PER이 있는 파일 추려서 ##
## 202111nn필터결과.csv 파일 만들기##
###################################
# 작업일 2021년 11월 26일 새벽 2시 35분 기준 주식 데이터 있는 11월 일
novemberlist=['01', '02', '03', '04', '05', '08', '09', '10', '11', '12', '15', '16', '17', '18', '19', '22', '23', '24', '25']
filtershcodelist=['20', '60', '880', '990', '1460', '1500', '1630', '1680', '1880', '2170', '2270', '2700', '2840',
                  '3230', '3310', '3540', '3550', '4310', '4690', '4890', '5500', '6060', '6090', '6740', '8420', '8490',
                  '9180', '10050', '12690', '14570', '14680', '16360', '17040', '17890', '18670', '19010', '19180',
                  '19990', '21080', '21320', '23410', '23590', '24090', '25530', '25750', '25820', '25860', '27970',
                  '30210', '30610', '31430', '32190', '32820', '33290', '33640', '35900', '36000', '36010', '36180',
                  '36540', '36570', '36670', '36810', '39020', '39030', '39290', '39420', '39830', '39840', '41920',
                  '42500', '45100', '45390', '45520', '49720', '49830', '49950', '53270', '53300', '53620', '53690',
                  '56360', '58630', '60250', '61970', '65710', '66970', '67080', '67160', '67390', '67900', '67920',
                  '68270', '68760', '68930', '69080', '69260', '71050', '71200', '71460', '71670', '79950', '81150',
                  '81660', '83310', '83420', '85620', '86390', '89600', '90350', '91340', '92220', '92730', '93320',
                  '93920', '94820', '94850', '94940', '95570', '95610', '100220', '102710', '103140', '104830',
                  '115500', '119860', '122450', '123570', '126640', '131090', '131390', '136540', '140860', '166090',
                  '178320', '183300', '189860', '192080', '192390', '210980', '214450', '215090', '217620', '220630',
                  '238490', '239610', '241590', '243840', '251270', '258610', '259630', '263720']

epsratelist=['0.492409324', '0.22724411425000002', '0.209730398', '0.2057091665', '0.36216212700000006', '0.19883951975000003', '0.3555196075', '0.21620482349999998', '0.15111019325', '0.2638892255', '0.29690249025', '0.481971347', '0.13397722275', '0.40477789875', '0.2518613125', '0.2680916595', '0.23597693625', '0.2313583795', '0.2147701815', '0.20298826675000003', '0.20598071074999996', '0.24203628900000002', '0.37574307249999994', '0.49479288349999995', '0.48344219875', '0.22726653424999999', '0.32886399349999995', '0.19363226075', '0.3487560166666667', '0.2044667005', '0.22926219025', '0.2347605835', '0.22237237233333337', '0.20157063375', '0.3679184445', '0.320483017','0.30363867224999996', '0.20437925950000005', '0.38542281575', '0.24069868249999998', '0.25369741425', '0.32609841024999997', '0.36152310849999997', '0.27804215200000004', '0.24814471233333343', '0.24444444450000002', '0.40982482625', '-0.06955051033333333', '0.31467354275000003', '0.044542195', '0.43743144449999993', '0.48482965075', '0.13888888899999996', '0.4069158465', '0.29717143724999995', '0.39446717324999997', '0.47312027766666676', '0.38808257799999996', '0.20728738000000005', '0.244428776', '0.27382448325', '0.261716598', '0.347473255', '0.30375339', '0.2685759755', '0.22511099299999998', '0.4030978715', '0.286652713', '0.37037707124999997', '0.07396760725', '0.3427052945', '0.231521636', '0.30332294475', '0.40559205575', '0.309976558', '0.2532153643333333', '0.2534708377499999', '0.2647760295', '0.12873485075000002', '0.440485577', '0.343110103', '0.38431000699999995', '0.37482555575', '0.16964651649999998', '0.36725737525', '0.20418448', '0.3497184280000001', '0.37856231875', '0.3699544965', '-0.1444267233333333', '0.4174240305', '0.48756813075', '0.373931028', '0.19087136950000005', '0.2302106935', '0.3098248985', '0.23950093025000002', '0.37025871125', '0.45392500100000005', '0.4075845366666666', '0.4743814533333334', '0.37451308800000005', '0.29037957775', '0.17713575024999995', '0.34480547500000003', '0.40187609300000005', '0.13197472525000004', '0.37161427225000004', '0.22219515799999998', '0.4920257340000001', '0.24132423249999996', '0.26666666666666666', '0.22702727050000002', '0.31836265625', '0.41720000675', '0.23075432950000002', '0.22949712525', '0.27020060200000007', '0.3743191477500001', '0.4266810845', '0.36722405375', '0.2338914825', '0.46782263050000006', '0.13681229475', '0.28985763625', '0.36231986549999995', '-0.07313165549999999', '0.15167419275', '0.46054698374999997', '0.34283338950000003', '0.397381303', '0.213914689', '0.278350663', '0.18617564799999997', '-0.11691140775', '0.177950442', '0.12702484175', '0.3487703665', '0.363225178', '0.186674984', '0.28791424525', '-0.588235294', '0.3375427205', '0.27325927424999996', '0.23580385299999998', '0.40489174149999996', '0.28285257824999993', '0.34878791475', '0.22104469975000002', '0.11805121566666665', '0.08874698524999997', '0.1481011925']


incomeratelist=['0.492409324', '0.26125490075', '0.209730398', '0.2059252415', '0.36216212700000006', '0.22278975450000002', '0.3555196075', '0.21620482349999998', '0.31794396825000004', '0.2638892255', '0.32881076475', '0.481971347', '0.28063358725', '0.40477789875', '0.2518613125', '0.2680916595', '0.20597611925', '0.27477574625', '0.2147701815', '0.20298826675000003', '0.20598071074999996', '0.24203628900000002', '0.37574307249999994', '0.49479288349999995', '0.48344219875', '0.22726653424999999', '0.42133285', '0.370512529', '0.3487560166666667', '0.2044667005', '0.2305186625', '0.2347605835', '0.22237237233333337', '0.20157063375', '0.377121048', '0.320483017', '0.30363867224999996', '0.20437925950000005', '0.38542281575', '0.24069868249999998', '0.261201398', '0.32609841024999997', '0.36152310849999997', '0.27804215200000004', '0.24814471233333343', '0.24444444450000002', '0.40982482625', '0.49697351800000006', '0.31467354275000003', '0.259237187', '0.43743144449999993', '0.48482965075', '0.20291582200000002', '0.3981056355', '0.30530709675', '0.40453950225', '0.47312027766666676', '0.38808257799999996', '0.20728738000000005', '0.31067528624999996', '0.273987794', '0.261716598', '0.387524089', '0.41045077750000003', '0.26897989275', '0.22511099299999998', '0.4030978715', '0.286652713', '0.375612909', '0.26583131475', '0.348774506', '0.231521636', '0.30332294475', '0.40559205575', '0.309976558', '0.2532153643333333', '0.288353474', '0.309977123', '0.24508088775', '0.440485577', '0.345119376', '0.38431000699999995', '0.37482555575', '0.23087167074999998', '0.36725737525', '0.20418448', '0.35725678033333336', '0.38610118325', '0.38912945325000003', '0.36154170199999996', '0.4257093695', '0.48756813075', '0.412662754', '0.21543075349999996', '0.28313109925', '0.3098248985', '0.23950093025000002', '0.37025871125', '0.45392500100000005', '0.4075845366666666', '0.4743814533333334', '0.37451308800000005', '0.296603021', '0.21060894274999997', '0.48240137400000005', '0.494063593', '0.26522486450000005', '0.37161427225000004', '0.2474506165', '0.4920257340000001', '0.24132423249999996', '0.3512974943333333', '0.260273918', '0.31836265625', '0.41720000675', '0.23075432950000002', '0.22949712525', '0.355486265', '0.3743191477500001', '0.428495333', '0.36722405375', '0.23586218774999998', '0.46782263050000006', '0.29954720075', '0.28985763625', '0.36231986549999995', '0.31368127125', '0.35665049625', '0.46054698374999997', '0.41724118949999994', '0.41088055900000003', '0.22953673249999998', '0.28303073375', '0.42679995725', '0.4070478205', '0.2082681125', '0.4282401195', '0.35946322975', '0.3856107026666666', '0.273538979', '0.31724177625', '0.35897977550000004', '0.386758807', '0.29180117674999995', '0.24562158599999998', '0.41652446649999997', '0.40265463175', '0.39873903625', '0.22376687425', '0.28208085033333336', '0.2911442925', '0.3358399035']

outfile=open("20211125필터결과.csv", "a", newline='')
infile = open('PERPBR배당수익률(개별종목)_20211125.csv', 'r', newline='')
line = infile.readline()
splitline = line.split(',')
appendline=csv.writer(outfile)
line = infile.readline()
splitline = line.split(',')

i=0

while(line!=''):
    filter2=0 #0이면 저장, 1이면 저장안함
    if(splitline[0]!=filtershcodelist[i]):
        line=infile.readline()
        splitline=line.split(',')
    else:
        if(splitline[6]==''):
            filter2=1

        if(filter2==0):
            appendline.writerow(splitline[:10])
            print(splitline[:10])
        i = i + 1
        line = infile.readline()
        splitline = line.split(',')

outfile.close()
infile.close()
"""
###################################
## STAGE 4 데이터가 온전한 파일 건지기 #
## income증가율 20~50 종목.csv를 토대로 #
## PERPBR배당수익률(개별종목)_202111nn.csv#
## 에서 PER이 있는 파일 추려서 ##
## 202111nn필터결과.csv 파일 만들기##
##############  끝  ###############
###################################

filtershcodelist=['20', '60', '880', '990', '1460', '1500', '1630', '1680', '1880', '2170', '2270', '2700', '2840',
                  '3230', '3310', '3540', '3550', '4310', '4690', '4890', '5500', '6060', '6090', '6740', '8420', '8490',
                  '9180', '10050', '12690', '14570', '14680', '16360', '17040', '17890', '18670', '19010', '19180',
                  '19990', '21080', '21320', '23410', '23590', '24090', '25530', '25750', '25820', '25860', '27970',
                  '30210', '30610', '31430', '32190', '32820', '33290', '33640', '35900', '36000', '36010', '36180',
                  '36540', '36570', '36670', '36810', '39020', '39030', '39290', '39420', '39830', '39840', '41920',
                  '42500', '45100', '45390', '45520', '49720', '49830', '49950', '53270', '53300', '53620', '53690',
                  '56360', '58630', '60250', '61970', '65710', '66970', '67080', '67160', '67390', '67900', '67920',
                  '68270', '68760', '68930', '69080', '69260', '71050', '71200', '71460', '71670', '79950', '81150',
                  '81660', '83310', '83420', '85620', '86390', '89600', '90350', '91340', '92220', '92730', '93320',
                  '93920', '94820', '94850', '94940', '95570', '95610', '100220', '102710', '103140', '104830',
                  '115500', '119860', '122450', '123570', '126640', '131090', '131390', '136540', '140860', '166090',
                  '178320', '183300', '189860', '192080', '192390', '210980', '214450', '215090', '217620', '220630',
                  '238490', '239610', '241590', '243840', '251270', '258610', '259630', '263720']

epsratelist=['0.492409324', '0.22724411425000002', '0.209730398', '0.2057091665', '0.36216212700000006', '0.19883951975000003', '0.3555196075', '0.21620482349999998', '0.15111019325', '0.2638892255', '0.29690249025', '0.481971347', '0.13397722275', '0.40477789875', '0.2518613125', '0.2680916595', '0.23597693625', '0.2313583795', '0.2147701815', '0.20298826675000003', '0.20598071074999996', '0.24203628900000002', '0.37574307249999994', '0.49479288349999995', '0.48344219875', '0.22726653424999999', '0.32886399349999995', '0.19363226075', '0.3487560166666667', '0.2044667005', '0.22926219025', '0.2347605835', '0.22237237233333337', '0.20157063375', '0.3679184445', '0.320483017','0.30363867224999996', '0.20437925950000005', '0.38542281575', '0.24069868249999998', '0.25369741425', '0.32609841024999997', '0.36152310849999997', '0.27804215200000004', '0.24814471233333343', '0.24444444450000002', '0.40982482625', '-0.06955051033333333', '0.31467354275000003', '0.044542195', '0.43743144449999993', '0.48482965075', '0.13888888899999996', '0.4069158465', '0.29717143724999995', '0.39446717324999997', '0.47312027766666676', '0.38808257799999996', '0.20728738000000005', '0.244428776', '0.27382448325', '0.261716598', '0.347473255', '0.30375339', '0.2685759755', '0.22511099299999998', '0.4030978715', '0.286652713', '0.37037707124999997', '0.07396760725', '0.3427052945', '0.231521636', '0.30332294475', '0.40559205575', '0.309976558', '0.2532153643333333', '0.2534708377499999', '0.2647760295', '0.12873485075000002', '0.440485577', '0.343110103', '0.38431000699999995', '0.37482555575', '0.16964651649999998', '0.36725737525', '0.20418448', '0.3497184280000001', '0.37856231875', '0.3699544965', '-0.1444267233333333', '0.4174240305', '0.48756813075', '0.373931028', '0.19087136950000005', '0.2302106935', '0.3098248985', '0.23950093025000002', '0.37025871125', '0.45392500100000005', '0.4075845366666666', '0.4743814533333334', '0.37451308800000005', '0.29037957775', '0.17713575024999995', '0.34480547500000003', '0.40187609300000005', '0.13197472525000004', '0.37161427225000004', '0.22219515799999998', '0.4920257340000001', '0.24132423249999996', '0.26666666666666666', '0.22702727050000002', '0.31836265625', '0.41720000675', '0.23075432950000002', '0.22949712525', '0.27020060200000007', '0.3743191477500001', '0.4266810845', '0.36722405375', '0.2338914825', '0.46782263050000006', '0.13681229475', '0.28985763625', '0.36231986549999995', '-0.07313165549999999', '0.15167419275', '0.46054698374999997', '0.34283338950000003', '0.397381303', '0.213914689', '0.278350663', '0.18617564799999997', '-0.11691140775', '0.177950442', '0.12702484175', '0.3487703665', '0.363225178', '0.186674984', '0.28791424525', '-0.588235294', '0.3375427205', '0.27325927424999996', '0.23580385299999998', '0.40489174149999996', '0.28285257824999993', '0.34878791475', '0.22104469975000002', '0.11805121566666665', '0.08874698524999997', '0.1481011925']


incomeratelist=['0.492409324', '0.26125490075', '0.209730398', '0.2059252415', '0.36216212700000006', '0.22278975450000002', '0.3555196075', '0.21620482349999998', '0.31794396825000004', '0.2638892255', '0.32881076475', '0.481971347', '0.28063358725', '0.40477789875', '0.2518613125', '0.2680916595', '0.20597611925', '0.27477574625', '0.2147701815', '0.20298826675000003', '0.20598071074999996', '0.24203628900000002', '0.37574307249999994', '0.49479288349999995', '0.48344219875', '0.22726653424999999', '0.42133285', '0.370512529', '0.3487560166666667', '0.2044667005', '0.2305186625', '0.2347605835', '0.22237237233333337', '0.20157063375', '0.377121048', '0.320483017', '0.30363867224999996', '0.20437925950000005', '0.38542281575', '0.24069868249999998', '0.261201398', '0.32609841024999997', '0.36152310849999997', '0.27804215200000004', '0.24814471233333343', '0.24444444450000002', '0.40982482625', '0.49697351800000006', '0.31467354275000003', '0.259237187', '0.43743144449999993', '0.48482965075', '0.20291582200000002', '0.3981056355', '0.30530709675', '0.40453950225', '0.47312027766666676', '0.38808257799999996', '0.20728738000000005', '0.31067528624999996', '0.273987794', '0.261716598', '0.387524089', '0.41045077750000003', '0.26897989275', '0.22511099299999998', '0.4030978715', '0.286652713', '0.375612909', '0.26583131475', '0.348774506', '0.231521636', '0.30332294475', '0.40559205575', '0.309976558', '0.2532153643333333', '0.288353474', '0.309977123', '0.24508088775', '0.440485577', '0.345119376', '0.38431000699999995', '0.37482555575', '0.23087167074999998', '0.36725737525', '0.20418448', '0.35725678033333336', '0.38610118325', '0.38912945325000003', '0.36154170199999996', '0.4257093695', '0.48756813075', '0.412662754', '0.21543075349999996', '0.28313109925', '0.3098248985', '0.23950093025000002', '0.37025871125', '0.45392500100000005', '0.4075845366666666', '0.4743814533333334', '0.37451308800000005', '0.296603021', '0.21060894274999997', '0.48240137400000005', '0.494063593', '0.26522486450000005', '0.37161427225000004', '0.2474506165', '0.4920257340000001', '0.24132423249999996', '0.3512974943333333', '0.260273918', '0.31836265625', '0.41720000675', '0.23075432950000002', '0.22949712525', '0.355486265', '0.3743191477500001', '0.428495333', '0.36722405375', '0.23586218774999998', '0.46782263050000006', '0.29954720075', '0.28985763625', '0.36231986549999995', '0.31368127125', '0.35665049625', '0.46054698374999997', '0.41724118949999994', '0.41088055900000003', '0.22953673249999998', '0.28303073375', '0.42679995725', '0.4070478205', '0.2082681125', '0.4282401195', '0.35946322975', '0.3856107026666666', '0.273538979', '0.31724177625', '0.35897977550000004', '0.386758807', '0.29180117674999995', '0.24562158599999998', '0.41652446649999997', '0.40265463175', '0.39873903625', '0.22376687425', '0.28208085033333336', '0.2911442925', '0.3358399035']


infile = open("20211125필터결과.csv", "r", newline='')
outfile= open("result20211125.csv", "a", newline='')
appendline=csv.writer(outfile)
line = infile.readline()
splitline = line.split(',')
i=0
number=0
while(line != ''):
    PER=float(splitline[6])
    PEG=(PER/float(incomeratelist[i]))/100
    if ((10 <= PER and PER <= 20) and (0 <= PEG and PEG <= 0.5)):
        #print(i, splitline[0], epsratelist[i], PER, PEG)
        appendline.writerow(splitline)
        number=number+1
    i=i+1
    line = infile.readline()
    splitline = line.split(',')

print(number)

infile.close()
outfile.close()